// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

model app {
    id String @id @default(uuid(7))
    active_season Int
    
}
// #region SEASON (get_snapshots) AND RELATED TABLES
model season {
  id                 String              @id @default(uuid(7))
  is_active          Boolean             @default(false)
  last_updated       DateTime            @default(now())
  //data
  season             Int                 @unique
  time               Int
  //relationships
  introduction_order introduction_order? @relation("OneSnapshotToOneIntroductionOrder") //a season can have 1 introduction_order, and an introduction_order must always be linked to a season
  points_max         points_max?         @relation("OneSnapshotToOnePointsMax") //a season MUST have 1 points_max, and a points_max MUST always be linked to a season
  snapshots snapshots[] @relation("OneSeasonToManySnapshots")
  defend_events defend_events[] @relation("OneSeasonToManyDefendEvents")
  attack_events attack_events[] @relation("OneSeasonToManyAttackEvents")
  //indexes
  @@index([season])
}

model introduction_order {
  id            String @id @default(uuid(7))
  season        Int    @unique //foreign key //only one introduction_order per season, hence unique. enforces one-to-one relationship
  json          Json //stores the order in JSON
  //relationship
  linked_season season @relation("OneSnapshotToOneIntroductionOrder", fields: [season], references: [season])
  //indexes
  @@index([season])
}

model points_max {
  id            String @id @default(uuid(7))
  season        Int    @unique //foreign key //only one points_max per season, hence unique. enforces one-to-one relationship
  json          Json //stores the points_max in JSON
  //relationship
  linked_season season @relation("OneSnapshotToOnePointsMax", fields: [season], references: [season])
  //indexes
  @@index([season])
}

model snapshots {
  //linked individual shapshots
  id     String @id @default(uuid(7))
  season Int   //foreign key
  time   Int    @unique //kinda acts as a snapshot_id
  data   Json
  //relationship
  linked_season season @relation("OneSeasonToManySnapshots", fields: [season], references: [season])
}

// #endregion

// #region STATUS (get_campaign_status) AND RELATED TABLES
model status {
  id   String @id @default(uuid(7))
  time Int //data
  // relationship
  // defend_events defend_events[] @relation("OneSeasonToManyDefendEvents")
  // attack_events attack_events[] @relation("OneSeasonToManyAttackEvents")
  // statistics statistics[] @relation("OneSeasonToManyStatistics")
}

model statistics {
  id                       String @id @default(uuid(7))
  season                   Int //foreign key
  season_duration          Int
  enemy                    Int
  players                  Int
  total_unique_players     Int
  missions                 Int
  successful_missions      Int
  total_mission_difficulty Int
  completed_planets        Int
  defend_events            Int
  successful_defend_events Int
  attack_events            Int
  successful_attack_events Int
  deaths                   BigInt
  kills                    BigInt
  accidentals              BigInt
  shots                    BigInt
  hits                     BigInt

  // Define the relationship with TimeStamps
  //   linked_season season @relation(fields: [season], references: [season])
}

// #endregion

// #region SHARED TABLES between SEASON and STATUS
model defend_events {
  id               String @id @default(uuid(7))
  season           Int // foreign key
  //data
  event_id         Int @unique
  start_time       Int
  end_time         Int
  region           Int
  enemy            Int
  points_max       Int
  points           Int
  status           String
  players_at_start Int
  //relationship
  linked_season season @relation("OneSeasonToManyDefendEvents", fields: [season], references: [season])
  //indexes
  @@index([event_id])
}

model attack_events {
  id               String @id @default(uuid(7))
  season           Int //foreign key
  //data
  event_id         Int @unique
  start_time       Int
  end_time         Int
  enemy            Int
  points_max       Int
  points           Int
  status           String
  players_at_start Int
  //relationship
  linked_season season @relation("OneSeasonToManyAttackEvents", fields: [season], references: [season])
  //indexes
  @@index([event_id])
}

// #endregion

/**
 * HOW TO UPDATE THE MODEL
 * update the database schema
 * --> npx prisma migrate dev --name "name or description"
 * apply db schema on prod
 * --> npx prisma migrate deploy
 */

// #region OLD            
model Timestamp {
  id               String           @id @default(uuid(7))
  timestamp        DateTime         @unique
  campaignStatuses CampaignStatus[]
  defendEvents     DefendEvent[]
  attackEvents     AttackEvent[]
  statistics       Statistic[]
}

model CampaignStatus {
  id                 String   @id @default(uuid(7))
  timestamp          DateTime
  season             Int
  points             Int
  points_taken       Int
  points_max         Int
  status             String
  introduction_order Int

  // Define the relationship with TimeStamps
  Timestamp Timestamp @relation(fields: [timestamp], references: [timestamp])
}

model DefendEvent {
  id         String   @id @default(uuid(7))
  timestamp  DateTime // used to link together data from the same api query
  season     Int
  event_id   Int
  start_time Int
  end_time   Int
  region     Int
  enemy      Int
  points_max Int
  points     Int
  status     String

  // Define the relationship with TimeStamps
  Timestamp Timestamp @relation(fields: [timestamp], references: [timestamp])
}

model AttackEvent {
  id               String   @id @default(uuid(7))
  timestamp        DateTime // used to link together data from the same api query
  season           Int
  event_id         Int
  start_time       Int
  end_time         Int
  enemy            Int
  points_max       Int
  points           Int
  status           String
  players_at_start Int
  max_event_id     Int

  // Define the relationship with TimeStamps
  Timestamp Timestamp @relation(fields: [timestamp], references: [timestamp])
}

model Statistic {
  id                       String   @id @default(uuid(7))
  timestamp                DateTime // used to link together data from the same api query
  season                   Int
  season_duration          Int
  enemy                    Int
  players                  Int
  total_unique_players     Int
  missions                 Int
  successful_missions      Int
  total_mission_difficulty Int
  completed_planets        Int
  defend_events            Int
  successful_defend_events Int
  attack_events            Int
  successful_attack_events Int
  deaths                   BigInt
  kills                    BigInt
  accidentals              BigInt
  shots                    BigInt
  hits                     BigInt

  // Define the relationship with TimeStamps
  Timestamp Timestamp @relation(fields: [timestamp], references: [timestamp])
}

// #endregion
